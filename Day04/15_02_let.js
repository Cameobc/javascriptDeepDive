// 1. 변수 중복 선언 금지
// - 중복 선언시 SyntaxError 발생

// 2. 블록 레벨 스코프(Block-level-scope)
// : 모든 코드 블록을 지역 스코프로 인정
let foo = 1;
{
    let foo = 2;
    let bar = 3;
}
console.log(foo);

// 3. 변수 호이스팅
// : var 로 선언한 변수와 달리 변수 호이스팅이 발생하지 않는 것처럼 동작함
// : let 키워드로 선언한 변수는 선언단계와 초기화 단계가 분리되어 실행된다.
// 런타임 이전 JS 엔진에 의해 선언되나 초기화 단계는 변수 선언문에 도달했을 때 실행된다.
// 초기화 단계 실행 이전에 변수에 접근하려고 할 경우 ReferenceError 발생
// 이로 인해 let 키워드로 선언한 벼수는 스코프의 시작 지점부터 초기화 단계 시작 지점(변수 선언문)까지 변수를 참조할 수 없다
// 이를 일시적 사각지대(Temporal Dead Zone) 라고 부름
let foo2 = 1;
{
  //  console.log(foo2);
  // 호이스팅이 발생하지 않는다면 전역변수은 1 을 출력해야 하나,
  // 호이스팅이 발생하기 때문에 ReferenceError 발생함.
  // 즉, 여전히 모든 선언이 호이스팅되나 ES6에서 도입된 let, const, class 를 사용한 선언문은 그렇지 않은 것처럼 동작함
  let foo2 = 2;
}

//============================
// 전역 객체와 let
// var 로 선언한 객체는 window.x 로 호출 가능함
// 하지만 let, const 로 선언한 전역 변수는 전역 객체 window 의 프로퍼티가 아님
